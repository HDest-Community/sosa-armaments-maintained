// ------------------------------------------------------------
// "NORA 00-4 Multi-Purpose Squad Shotgun" Semi-automatic 4ga Shotgun
// ------------------------------------------------------------

const HDLD_4GANORA="n4g";

class HD4GBBlaster:HDShotgun{
	default{
		weapon.selectionorder 73;
		weapon.slotnumber 3;
		weapon.slotpriority 5;
		weapon.bobrangex 0.34;
		weapon.bobrangey 0.72;
		scale 0.6;
		inventory.pickupmessage "You got the NORA 00-4 MPSS!";
		hdweapon.barrelsize 30,1,2;
		hdweapon.refid HDLD_4GANORA;
		tag "NORA 00-4 Multi-Purpose Squad Shotgun";
		obituary "%o was swiss cheesed by %k";
		
		hdweapon.loadoutcodes "
			\cuslug - start with slugs loaded";
	}

    override void PostBeginPlay()
    {
        weaponspecial = 1337; // [Ace] UaS sling compatibility.
        Super.PostBeginPlay();
    }

	override void DoEffect(){
		let hdp=hdplayerpawn(owner);
		if(hdp){
			//droop downwards
			if(
				!hdp.gunbraced
				&&!!hdp.player
				&&hdp.player.readyweapon==self
				&&hdp.strength
				&&hdp.pitch<frandom(5,8)
				&&!(weaponstatus[0]&BFGF_STRAPPED)
			)hdp.A_MuzzleClimb((
				frandom(-0.05,0.05),
				frandom(0.05,clamp(1-pitch,0.06/hdp.strength,0.12))
			),(0,0),(0,0),(0,0));
		}
		Super.DoEffect();
	}

    override double gunmass(){
        return 19+(
		weaponstatus[NORAS_TB1]>2?1:0
		+weaponstatus[NORAS_TB2]>2?1:0
		+weaponstatus[NORAS_TB3]>2?1:0
		+weaponstatus[NORAS_TB4]>2?1:0
		+weaponstatus[NORAS_TB5]>2?1:0
		)*0.6;
    }

    override double weaponbulk(){
        return 280+(
		weaponstatus[NORAS_TB1]>2?1:0
		+weaponstatus[NORAS_TB2]>2?1:0
		+weaponstatus[NORAS_TB3]>2?1:0
		+weaponstatus[NORAS_TB4]>2?1:0
		+weaponstatus[NORAS_TB5]>2?1:0
		)*ENC_4GBLOADED;
    }

    override string,double getpickupsprite(){return "N4PSA0",1.0;}

    override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("400SC0",(-47,-10),basestatusbar.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("HD4GBAmmo"),-46,-8,
				basestatusbar.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawimage("E4GSC0",(-62,-10),basestatusbar.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("HD4GSAmmo"),-61,-8,
				basestatusbar.DI_SCREEN_CENTER_BOTTOM
			);
		}

		int chm=hdw.weaponstatus[NORAS_CHAMBER];
		int tb1=hdw.weaponstatus[NORAS_TB1];
		int tb2=hdw.weaponstatus[NORAS_TB2];
		int tb3=hdw.weaponstatus[NORAS_TB3];
        int tb4=hdw.weaponstatus[NORAS_TB4];
		int tb5=hdw.weaponstatus[NORAS_TB5];
		if(chm>0){
			sb.drawrect(-18,-14,2,3);
			if(chm==3){
				sb.drawrect(-24,-14,1,1);sb.drawrect(-22,-14,1,1);sb.drawrect(-20,-14,1,1);
				sb.drawrect(-23,-13,1,1);sb.drawrect(-21,-13,1,1);
				sb.drawrect(-24,-12,1,1);sb.drawrect(-22,-12,1,1);sb.drawrect(-20,-12,1,1);
			}if(chm==4){
				sb.drawrect(-23,-14,4,3);
				sb.drawrect(-24,-13,1,1);
			}
		}
		if(tb1>0){
			sb.drawrect(-18,-10,2,3);
			if(tb1==3){
				sb.drawrect(-23,-10,1,1);sb.drawrect(-21,-10,1,1);sb.drawrect(-19,-10,1,1);
				sb.drawrect(-22,-9,1,1);sb.drawrect(-20,-9,1,1);
				sb.drawrect(-23,-8,1,1);sb.drawrect(-21,-8,1,1);sb.drawrect(-19,-8,1,1);
			}if(tb1==4){
				sb.drawrect(-22,-10,3,3);
				sb.drawrect(-23,-9,1,1);
			}
		}if(tb2>0){
			sb.drawrect(-26,-10,2,3);
			if(tb2==3){
				sb.drawrect(-31,-10,1,1);sb.drawrect(-29,-10,1,1);sb.drawrect(-27,-10,1,1);
				sb.drawrect(-30,-9,1,1);sb.drawrect(-28,-9,1,1);
				sb.drawrect(-31,-8,1,1);sb.drawrect(-29,-8,1,1);sb.drawrect(-27,-8,1,1);
			}if(tb2==4){
				sb.drawrect(-30,-10,3,3);
				sb.drawrect(-31,-9,1,1);
			}
		}if(tb3>0){
			sb.drawrect(-34,-10,2,3);
			if(tb3==3){
				sb.drawrect(-39,-10,1,1);sb.drawrect(-37,-10,1,1);sb.drawrect(-35,-10,1,1);
				sb.drawrect(-38,-9,1,1);sb.drawrect(-36,-9,1,1);
				sb.drawrect(-39,-8,1,1);sb.drawrect(-37,-8,1,1);sb.drawrect(-35,-8,1,1);
			}if(tb3==4){
				sb.drawrect(-38,-10,3,3);
				sb.drawrect(-39,-9,1,1);
			}
		}if(tb4>0){
			sb.drawrect(-34,-6,2,3);
			if(tb4==3){
				sb.drawrect(-39,-6,1,1);sb.drawrect(-37,-6,1,1);sb.drawrect(-35,-6,1,1);
				sb.drawrect(-38,-5,1,1);sb.drawrect(-36,-5,1,1);
				sb.drawrect(-39,-4,1,1);sb.drawrect(-37,-4,1,1);sb.drawrect(-35,-4,1,1);
			}if(tb4==4){
				sb.drawrect(-38,-6,3,3);
				sb.drawrect(-39,-5,1,1);
			}
		}if(tb5>0){
			sb.drawrect(-26,-6,2,3);
			if(tb5==3){
				sb.drawrect(-31,-6,1,1);sb.drawrect(-29,-6,1,1);sb.drawrect(-27,-6,1,1);
				sb.drawrect(-30,-5,1,1);sb.drawrect(-28,-5,1,1);
				sb.drawrect(-31,-4,1,1);sb.drawrect(-29,-4,1,1);sb.drawrect(-27,-4,1,1);
			}if(tb5==4){
				sb.drawrect(-30,-6,3,3);
				sb.drawrect(-31,-5,1,1);
				}
			}
		}
//		sb.drawwepnum(hdw.weaponstatus[NORAS_TUBE],3,posy:-7);
	
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Shoot\n"
		..WEPHELP_ALTFIRE.."  Pump\n"
		..WEPHELP_RELOAD.."  Load Shells\n"
		..WEPHELP_ALTRELOAD.."  Load Slugs\n"
		.."When pumped:	"..WEPHELP_RELOAD.."/"..WEPHELP_ALTRELOAD.." Load the chamber a shell/slug\n"
		..WEPHELP_UNLOADUNLOAD
		;
	}

    override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-32+bob.y,32,40,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*1.1;
		sb.drawimage(
			"NR4GFRNT",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"NR4GBACK",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9
		);
	}

	//returns the power of the load just fired
	static double FireShell(actor caller){
		double shotpower=1.0;
		HDBulletActor.FireBullet(caller,"HDB_4wad");
		let p=HDBulletActor.FireBullet(caller,"HDB_400",
		spread:6.0,speedfactor:0.98,amount:40
		);
		distantnoise.make(p,"world/shotgunfar");
		caller.A_StartSound("weapons/nora4gashoot1",CHAN_WEAPON,CHANF_DEFAULT,0.5);
		caller.A_StartSound("weapons/nora4gashoot2",9,CHANF_DEFAULT);
		return shotpower;
	}

	static double FireSlug(actor caller){
		double shotpower=1.0;
		HDBulletActor.FireBullet(caller,"HDB_4wad");
		let p=HDBulletActor.FireBullet(caller,"HDB_4GS",
			spread:3.5,speedfactor:0.98
		);
		distantnoise.make(p,"world/shotgunfar");
		caller.A_StartSound("weapons/nora4gashoot1",CHAN_WEAPON,CHANF_DEFAULT);
		caller.A_StartSound("weapons/nora4gashoot2",9,CHANF_DEFAULT,0.5);
		return shotpower;
	}

	action void A_FireNora(){
		double shotpower=invoker.weaponstatus[NORAS_CHAMBER]==4?invoker.FireSlug(self):invoker.FireShell(self);
		if(invoker.weaponstatus[NORAS_CHAMBER]>3){//slug's recoil
			A_ZoomRecoil(0.8);
			A_MuzzleClimb(-frandom(7, 10.5), -frandom(9, 13.5), -frandom(7, 10.5), -frandom(9, 13.5));
			if(!gunbraced()){
				A_ChangeVelocity(
					cos(pitch)*-frandom(0.75,1.5),0,sin(pitch)*frandom(0.75,1.5),
					CVF_RELATIVE
				);
			}
			A_ChangeVelocity(
				cos(pitch)*-frandom(0.25,0.5),0,sin(pitch)*frandom(0.25,0.5),
				CVF_RELATIVE
			);
		}else{//buckshot's recoil
			A_ZoomRecoil(0.9);
			A_MuzzleClimb(-frandom(3.5, 5.25), -frandom(4.5, 6.75), -frandom(3.5, 5.25), -frandom(4.5, 6.75));
			if(!gunbraced()){
				A_ChangeVelocity(
					cos(pitch)*-frandom(0.375,0.75),0,sin(pitch)*frandom(0.375,0.75),
					CVF_RELATIVE
				);
			}
			A_ChangeVelocity(
				cos(pitch)*-frandom(0.125,0.25),0,sin(pitch)*frandom(0.125,0.25),
				CVF_RELATIVE
			);
		}
		A_Light2();
		HDFlashAlpha(-32);
		A_AlertMonsters();
		invoker.weaponstatus[NORAS_CHAMBER]-=2;
		invoker.shotpower=shotpower;
	}

	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			owner.A_DropInventory("HD4GSAmmo",amt*6);
			owner.A_DropInventory("HD4GBAmmo",amt*6);
		}
	}

	override void ForceBasicAmmo(){
		if(weaponstatus[0]&NORAF_SLUGLOADOUT)owner.A_SetInventory("HD4GSAmmo",6);
		else owner.A_SetInventory("HD4GBAmmo",6);
	}

	override void DetachFromOwner(){
		if(handshells>0){
			let ammo = (weaponstatus[0] & NORAF_SLUG)? "HD4GSAmmo" : "HD4GBAmmo";
			if(owner)owner.A_DropItem(ammo,handshells);
			else A_DropItem(ammo,handshells);
		}
		handshells=0;
		HDWeapon.detachfromowner();
	}

	action void A_SetAltHold(bool which){
		if(which)invoker.weaponstatus[0]|=NORAF_ALTHOLDING;
		else invoker.weaponstatus[0]&=~NORAF_ALTHOLDING;
	}

	action void A_PushNoraTube(){
		invoker.weaponstatus[NORAS_TB1]=invoker.weaponstatus[NORAS_TB2];
		invoker.weaponstatus[NORAS_TB2]=invoker.weaponstatus[NORAS_TB3];
		invoker.weaponstatus[NORAS_TB3]=invoker.weaponstatus[NORAS_TB4];
		invoker.weaponstatus[NORAS_TB4]=invoker.weaponstatus[NORAS_TB5];
		invoker.weaponstatus[NORAS_TB5]=0;
	}

	action void A_Chamber(bool careful=false){
		int chm=invoker.weaponstatus[NORAS_CHAMBER];
		invoker.weaponstatus[NORAS_CHAMBER]=invoker.weaponstatus[NORAS_TB1];
		A_PushNoraTube();
		vector3 cockdir;double cp=cos(pitch);
		if(careful)cockdir=(-cp,cp,-5);
		else cockdir=(0,-cp*5,sin(pitch)*frandom(4,6));
		cockdir.xy=rotatevector(cockdir.xy,angle);
        bool pocketed=false;
		if(chm>2){
			if(careful&&!A_JumpIfInventory(chm==4?"HD4GSAmmo":"HD4GBAmmo",0,"null")){
				HDF.Give(self,chm==4?"HD4GSAmmo":"HD4GBAmmo",1);
				pocketed=true;
			}
		}else if(chm>0){	
			cockdir*=frandom(1.,1.3);
		}

		if(
			!pocketed
			&&chm>=1
		){
			vector3 gunofs=HDMath.RotateVec3D((9,-1,-2),angle,pitch);
			actor rrr=null;

			if(chm>2)rrr=spawn(chm==4?"HDFumbling4GS":"HDFumbling4GB",(pos.xy,pos.z+height*0.85)+gunofs+viewpos.offset);
			else rrr=spawn(chm==2?"HDSpent4GS":"HDSpent4GB",(pos.xy,pos.z+height*0.85)+gunofs+viewpos.offset);

			rrr.target=self;
			rrr.angle=angle;
			rrr.vel=HDMath.RotateVec3D((1,-5,0.2),angle,pitch);
			if(chm==1)rrr.vel*=1.3;
			rrr.vel+=vel;
		}
	}

	action bool A_LoadTubeFromHand(){
		bool slg=invoker.weaponstatus[0]&NORAF_SLUG;
		int hand=invoker.handshells;
		if(
			!hand
			||(
				invoker.weaponstatus[NORAS_CHAMBER]>0
				&&invoker.weaponstatus[NORAS_TB1]>0
				&&invoker.weaponstatus[NORAS_TB2]>0
				&&invoker.weaponstatus[NORAS_TB3]>0
				&&invoker.weaponstatus[NORAS_TB4]>0
				&&invoker.weaponstatus[NORAS_TB5]>0
			)
		){
			EmptyHand();
			return false;
		}
		invoker.weaponstatus[NORAS_TB5]=invoker.weaponstatus[NORAS_TB4];
		invoker.weaponstatus[NORAS_TB4]=invoker.weaponstatus[NORAS_TB3];
		invoker.weaponstatus[NORAS_TB3]=invoker.weaponstatus[NORAS_TB2];
		invoker.weaponstatus[NORAS_TB2]=invoker.weaponstatus[NORAS_TB1];
		invoker.weaponstatus[NORAS_TB1]=slg?4:3;
		invoker.handshells--;
		A_StartSound("weapons/huntreload",8,CHANF_OVERLAP);
		return true;
	}

	action bool A_GrabShells(int maxhand=1,bool settics=false,bool alwaysone=false){
		bool slg=invoker.weaponstatus[0]&NORAF_SLUG;
		if(maxhand>0)EmptyHand();else maxhand=abs(maxhand);
		int toload=min(
			slg?countinv("HD4GSAmmo"):countinv("HD4GBAmmo"),
			1,		//alwaysone?1:(3-invoker.weaponstatus[NORAS_TUBE]),
			max(1,health/22),
			maxhand
		);
		if(toload<1)return false;
		invoker.handshells=toload;
		A_TakeInventory(slg?"HD4GSAmmo":"HD4GBAmmo",toload,TIF_NOTAKEINFINITE);
		if(settics)A_SetTics(7);
		A_StartSound("weapons/pocket",9);
		A_MuzzleClimb(
			frandom(0.1,0.15),frandom(0.2,0.4),
			frandom(0.2,0.25),frandom(0.3,0.4),
			frandom(0.1,0.35),frandom(0.3,0.4),
			frandom(0.1,0.15),frandom(0.2,0.4)
		);
		return true;
	}

	action void EmptyHand(int amt=-1,bool careful=false){
		if(!amt)return;
		if(amt>0)invoker.handshells=amt;

		while(invoker.handshells>0){
			let slug = invoker.weaponstatus[0] & NORAF_SLUG;
			let ammo = slug? "HD4GSAmmo" : "HD4GBAmmo";

			if(careful&&!A_JumpIfInventory(ammo,0,"null")){
				invoker.handshells--;
				HDF.Give(self,ammo,1);
 			}else{
				invoker.handshells--;
				A_SpawnItemEx(slug? "HDFumbling4GS" : "HDFumbling4GB",
					cos(pitch)*5,1,height-7-sin(pitch)*5,
					cos(pitch)*cos(angle)*frandom(1,4)+vel.x,
					cos(pitch)*sin(angle)*frandom(1,4)+vel.y,
					-sin(pitch)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
		}
	}

    states{
	select0:
		NR4G A 0;
		goto select0big;
	deselect0:
		NR4G A 0;
		goto deselect0big;
	ready:
		NR4G A 0 A_JumpIf(pressingaltfire(),2);
		NR4G A 0{
			if(!pressingaltfire()){
				if(!pressingfire())A_ClearRefire();
				A_SetAltHold(false);
			}
		}
		NR4G A 1 A_WeaponReady(WRF_ALL);
		NR4G A 0{invoker.weaponstatus[0]&=~NORAF_SLUG;}
		goto readyend;
	hold:
		NR4G A 0{
			bool paf=pressingaltfire();
			if(
				paf&&!(invoker.weaponstatus[0]&NORAF_ALTHOLDING)
			)setweaponstate("chamber");
			else if(!paf)invoker.weaponstatus[0]&=~NORAF_ALTHOLDING;
		}
		NR4G A 1 A_WeaponReady(WRF_NONE);
		NR4G A 0 A_Refire();
		goto ready;
	fire:
		NR4G A 0 A_JumpIf(invoker.weaponstatus[NORAS_CHAMBER]>2,"shoot");
		NR4G A 1 A_WeaponReady(WRF_NONE);
		NR4G A 0 A_Refire();
		goto ready;
	shoot:
		NR4G A 2;
		NR4G B 1 offset(0,40) bright{
			A_FireNora();
		}
		NR4G A 0 A_Light0();
		NR4G A 1;
		goto chamberauto;
	chamberauto:
		NR4G A 1 A_Chamber();
		NR4G A 1;
		NR4G A 0 A_Refire();
		goto ready;
	altfire:
	chamber:
		NR4G A 0 A_JumpIf(invoker.weaponstatus[0]&NORAF_ALTHOLDING,"nope");
		NR4G A 0 A_SetAltHold(true);
		NR4G C 4;
		NR4G D 3 A_Overlay(120,"playsgco");
		NR4G E 2 A_MuzzleClimb(0,frandom(0.6,1.));
		NR4G E 1 A_JumpIf(pressingaltfire(),"longstroke");
		NR4G D 2 A_MuzzleClimb(0,-frandom(0.6,1.));
		NR4G C 4;
		NR4G A 1;
		NR4G A 0 A_StartSound("weapons/huntshort",8);
		NR4G A 0 A_Refire("ready");
		goto ready;
	longstroke:
		NR4G F 2 A_MuzzleClimb(frandom(1.,2.));
		NR4G F 0{
			A_Chamber();
			A_MuzzleClimb(-frandom(1.,2.));
		}
	racked:
		NR4G F 1 A_WeaponReady(WRF_NOFIRE);
		NR4G F 0 A_JumpIf(!pressingaltfire(),"unrack");
		NR4G F 0 A_JumpIf(pressingunload(),"rackunload");
		//GSTG F 0 A_JumpIf(invoker.weaponstatus[NORAS_CHAMBER],"racked");
		NR4G F 0{
			int rld=0;
			if(pressingreload()){
				rld=1;
			}else if(pressingaltreload()){
				rld=2;
				invoker.weaponstatus[0]|=NORAF_SLUG;
			}
			if(
				rld>0
				&&(countinv("HD4GSAmmo")
					||countinv("HD4GBAmmo")
				)
			)setweaponstate("rackreload");
		}
		loop;
	rackreload:
		NR4G F 1 offset(-1,35) A_WeaponBusy(true);
		NR4G F 2 offset(-2,37);
		NR4G F 3 offset(-3,40);
		NR4G F 1 offset(-4,42); //A_GrabShells(1,true,true);
		NR4G F 5 offset(-5,43);
		NR4G F 5 offset(-4,41) A_StartSound("weapons/pocket",9); 
	rackloadone:
		NR4G F 1 offset(-4,42);
		NR4G F 2 offset(-4,41){
			if(PressingAltReload())invoker.weaponstatus[0]|=NORAF_SLUG;
			if(countinv("HD4GSAmmo")>0&&countinv("HD4GBAmmo")<1)invoker.weaponstatus[0]|=NORAF_SLUG;
			if(countinv("HD4GSAmmo")<1)invoker.weaponstatus[0]&=~NORAF_SLUG;
			}
		NR4G F 2 offset(-4,40){
			bool slg=invoker.weaponstatus[0]&NORAF_SLUG;
			/*if(invoker.weaponstatus[NORAS_CHAMBER]<=0){
				A_TakeInventory(slg?"HD4GSAmmo":"HD4GBAmmo",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[NORAS_CHAMBER]=invoker.weaponstatus[0]&NORAF_SLUG?4:3;
			}*/
			switch(invoker.weaponstatus[NORAS_CHAMBER]){
				case 0:
					A_StartSound("weapons/huntreload",8,CHANF_OVERLAP);
					A_TakeInventory(slg?"HD4GSAmmo":"HD4GBAmmo",1,TIF_NOTAKEINFINITE);
					invoker.weaponstatus[NORAS_CHAMBER]=invoker.weaponstatus[0]&NORAF_SLUG?4:3;
					break;
				case 1: case 2: case 3: case 4:
					break;
				default:
					break;
			}
		}
		NR4G F 4 offset(-4,41);
		NR4G F 3 offset(-4,40) A_JumpIf(invoker.handshells>0,"rackloadone");
		goto rackreloadend;
	rackreloadend:
		NR4G F 1 offset(-3,39){invoker.weaponstatus[0]&=~NORAF_SLUG;}
		NR4G F 1 offset(-2,37);
		NR4G F 1 offset(-1,34);
		NR4G F 0 A_WeaponBusy(false);
		goto racked;

	rackunload:
		NR4G F 1 offset(-1,35) A_WeaponBusy(true);
		NR4G F 2 offset(-2,37);
		NR4G F 4 offset(-3,40);
		NR4G F 1 offset(-4,42);
		NR4G F 2 offset(-4,41);
		NR4G F 3 offset(-4,40){
			int chm=invoker.weaponstatus[NORAS_CHAMBER];
			invoker.weaponstatus[NORAS_CHAMBER]=0;
			if(chm>2){
				A_StartSound("weapons/huntreload",8);
				if(A_JumpIfInventory(chm==4?"HD4GSAmmo":"HD4GBAmmo",0,"null"))
				A_SpawnItemEx(chm==4?"HDFumbling4GS":"HDFumbling4GB",
					cos(pitch)*8,0,height-7-sin(pitch)*8,
					vel.x+cos(pitch)*cos(angle-random(86,90))*5,
					vel.y+cos(pitch)*sin(angle-random(86,90))*5,
					vel.z+sin(pitch)*random(4,6),
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);else{
					HDF.Give(self,chm==4?"HD4GSAmmo":"HD4GBAmmo",1);
					A_StartSound("weapons/pocket",9);
					A_SetTics(5);
				}
			}else if(chm>0)A_SpawnItemEx(chm==2?"HDSpent4GS":"HDSpent4GB",
				cos(pitch)*8,0,height-7-sin(pitch)*8,
				vel.x+cos(pitch)*cos(angle-random(86,90))*5,
				vel.y+cos(pitch)*sin(angle-random(86,90))*5,
				vel.z+sin(pitch)*random(4,6),
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			//if(chm)A_StartSound("weapons/huntreload",8,CHANF_OVERLAP);
		}
		NR4G F 5 offset(-4,41);
		NR4G F 4 offset(-4,40) A_JumpIf(invoker.handshells>0,"rackloadone");
		goto rackreloadend;

	unrack:
		NR4G F 0 A_Overlay(120,"playsgco2");
		NR4G E 1 A_JumpIf(!pressingfire(),1);
		NR4G ED 2{
			if(pressingfire())A_SetTics(1);
			A_MuzzleClimb(0,-frandom(0.6,1.));
		}
		NR4G C 4;
		NR4G A 2;
		NR4G A 0 A_ClearRefire();
		goto ready;
	playsgco:
		TNT1 A 8 A_StartSound("weapons/nora4gaback",8);
		TNT1 A 0 A_StopSound(8);
		stop;
	playsgco2:
		TNT1 A 8 A_StartSound("weapons/nora4gaforward",8);
		TNT1 A 0 A_StopSound(8);
		stop;
	altreload:
		NR4G A 0{invoker.weaponstatus[0]|=NORAF_SLUG;}
	reload:
	startreload:
		NR4G A 0{
			int ppp=countinv("HD4GBAmmo");
			int sss=countinv("HD4GSAmmo");
			if(ppp<1&&sss<1)setweaponstate("nope");
			}
		NR4G A 1 A_JumpIf(invoker.weaponstatus[NORAS_TB5]>0,"nope");
		NR4G AC 3 A_MuzzleClimb(frandom(.6,.7),-frandom(.6,.7));
	reloadstarthand:
		NR4G D 1 offset(0,36);
		NR4G D 1 offset(0,38);
		NR4G D 1 offset(0,36);
		NR4G D 2 offset(0,34);
		NR4G D 2 offset(0,36);
		NR4G D 2 offset(0,40){
			if(PressingAltReload())invoker.weaponstatus[0]|=NORAF_SLUG;
			if(countinv("HD4GSAmmo")>0&&countinv("HD4GBAmmo")<1)invoker.weaponstatus[0]|=NORAF_SLUG;
			if(countinv("HD4GSAmmo")<1)invoker.weaponstatus[0]&=~NORAF_SLUG;
			}
	reloadpocket:
		NR4G D 3 offset(0,39)A_GrabShells(1,false);
		NR4G D 2 offset(0,40) A_JumpIf(health>40,1);
		NR4G D 1 offset(0,40) A_StartSound("weapons/pocket",9);
		NR4G D 4 offset(0,42) A_StartSound("weapons/pocket",9);
		NR4G D 2 offset(0,41) A_StartSound("weapons/pocket",9);
		NR4G D 2 offset(0,40);
		goto reloadashell;
	reloadashell:
		NR4G D 2 offset(0,36);
		NR4G D 4 offset(0,34)A_LoadTubeFromHand();
		NR4G DDDDDD 1 offset(0,33){
			if(
				PressingReload()
				||PressingAltReload()
				||PressingUnload()
				||PressingFire()
				||PressingAltfire()
				||PressingZoom()
				||PressingFiremode()
			)invoker.weaponstatus[0]|=NORAF_HOLDING;
			else invoker.weaponstatus[0]&=~NORAF_HOLDING;
			invoker.weaponstatus[0]&=~NORAF_SLUG;
			if(
				invoker.weaponstatus[NORAS_TB5]>0
				||(
					invoker.handshells<1
					&&!countinv("HD4GBAmmo")
					&&!countinv("HD4GSAmmo")
				)
			)setweaponstate("reloadend");
			else if(
				!pressingaltreload()
				&&!pressingreload()
			)setweaponstate("reloadend");
			else if(invoker.handshells<1)setweaponstate("reloadstarthand");
		}goto reloadashell;
	reloadend:
		NR4G D 3 offset(0,34) A_StartSound("weapons/huntopen",8);
		NR4G D 1 offset(0,36) EmptyHand(careful:true);
		NR4G D 1 offset(0,34){invoker.weaponstatus[0]&=~NORAF_SLUG;}
		NR4G DCA 3;
		NR4G A 0 A_JumpIf(invoker.weaponstatus[0]&NORAF_HOLDING,"nope");
		goto ready;
	unload:
		NR4G A 1{
			if(
				invoker.weaponstatus[NORAS_CHAMBER]<1
				&&invoker.weaponstatus[NORAS_TB1]<1
			)setweaponstate("nope");
		}
		NR4G CD 4 A_MuzzleClimb(frandom(1.2,2.4),-frandom(1.2,2.4));
		NR4G D 1 offset(0,34);
		NR4G D 1 offset(0,36) A_StartSound("weapons/huntopen",8);
		NR4G D 1 offset(0,38);
		NR4G D 4 offset(0,36){
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			if(invoker.weaponstatus[NORAS_CHAMBER]<1){
				setweaponstate("unloadtube");
			}else A_StartSound("weapons/nora4gafull",8,CHANF_OVERLAP);
		}
		NR4G F 8 offset(0,34){
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			int chm=invoker.weaponstatus[NORAS_CHAMBER];
			invoker.weaponstatus[NORAS_CHAMBER]=0;
			if(chm>2){
				A_StartSound("weapons/huntreload",8);
				if(A_JumpIfInventory(chm==4?"HD4GSAmmo":"HD4GBAmmo",0,"null"))
				A_SpawnItemEx(chm==4?"HDFumbling4GS":"HDFumbling4GB",
					cos(pitch)*8,0,height-7-sin(pitch)*8,
					vel.x+cos(pitch)*cos(angle-random(86,90))*5,
					vel.y+cos(pitch)*sin(angle-random(86,90))*5,
					vel.z+sin(pitch)*random(4,6),
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);else{
					HDF.Give(self,chm==4?"HD4GSAmmo":"HD4GBAmmo",1);
					A_StartSound("weapons/pocket",9);
					A_SetTics(5);
				}
			}else if(chm>0)A_SpawnItemEx(chm==2?"HDSpent4GS":"HDSpent4GB",
				cos(pitch)*8,0,height-7-sin(pitch)*8,
				vel.x+cos(pitch)*cos(angle-random(86,90))*5,
				vel.y+cos(pitch)*sin(angle-random(86,90))*5,
				vel.z+sin(pitch)*random(4,6),
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
		}
		NR4G D 0 A_JumpIf(!pressingunload(),"reloadend");
		NR4G D 4 offset(0,40);
	unloadtube:
		NR4G D 6 offset(0,40) EmptyHand(careful:true);
	unloadloop:
		NR4G D 8 offset(1,41){
			if(invoker.weaponstatus[NORAS_TB1]<1)setweaponstate("reloadend");
			else {
				for (int i = NORAS_TB1; i <= NORAS_TB5; i--) {
					if (invoker.weaponstatus[i] < 1) continue;

					if (invoker.weaponstatus[i] == 4) invoker.weaponstatus[0] |= NORAF_SLUG;
					invoker.weaponstatus[i] = 0;
					invoker.handshells = 1;
					A_PushNoraTube();

					break;
				}
			}
/*			if(invoker.weaponstatus[NORAS_TB1]==4)invoker.weaponstatus[0]|=NORAF_SLUG;
			invoker.weaponstatus[NORAS_TB1]=invoker.weaponstatus[NORAS_TB2];
			invoker.weaponstatus[NORAS_TB2]=invoker.weaponstatus[NORAS_TB3];
			invoker.weaponstatus[NORAS_TB3]=invoker.weaponstatus[NORAS_TB4];
			invoker.weaponstatus[NORAS_TB4]=invoker.weaponstatus[NORAS_TB5];
			invoker.weaponstatus[NORAS_TB5]=0;
*/		}
		NR4G D 4 offset(0,40){
			A_StartSound("weapons/huntreload",8);
			EmptyHand(careful: true);
			invoker.weaponstatus[0]&=~NORAF_SLUG;
			}
		NR4G D 3 offset(1,41);
		NR4G D 1 offset(1,42){
			A_StartSound("weapons/pocket",9);
			A_SetTics(8);
		}
		NR4G D 3 {
			invoker.weaponstatus[0]&=~NORAF_SLUG;
			if(!pressingunload())setweaponstate("reloadend");
			}
		loop;
    spawn:
		N4PS A -1 nodelay{
		}
    }

    override void InitializeWepStats(bool idfa){
		if(weaponstatus[0]&NORAF_SLUGLOADOUT){
			weaponstatus[NORAS_CHAMBER]=4;
			weaponstatus[NORAS_TB1]=4;
			weaponstatus[NORAS_TB2]=4;
			weaponstatus[NORAS_TB3]=4;
            weaponstatus[NORAS_TB4]=4;
            weaponstatus[NORAS_TB5]=4;
			handshells=0;
		}else{
		weaponstatus[NORAS_CHAMBER]=3;
		weaponstatus[NORAS_TB1]=3;
		weaponstatus[NORAS_TB2]=3;
		weaponstatus[NORAS_TB3]=3;
        weaponstatus[NORAS_TB4]=3;
        weaponstatus[NORAS_TB5]=3;
		handshells=0;
		}
	}

    override void loadoutconfigure(string input){
		int slug=min(getloadoutvar(input,"slug",1),1); //Start with slugs
		if(slug>=0){
			weaponstatus[0]|=NORAF_SLUGLOADOUT;
			weaponstatus[NORAS_CHAMBER]=4;
			weaponstatus[NORAS_TB1]=4;
			weaponstatus[NORAS_TB2]=4;
			weaponstatus[NORAS_TB3]=4;
            weaponstatus[NORAS_TB4]=4;
            weaponstatus[NORAS_TB5]=4;
		}
	}
}

enum nora4gastatus{
	NORAS_TB1=1, //mouth of tube
	NORAS_TB2=2,
	NORAS_TB3=3,
    NORAS_TB4=4,
    NORAS_TB5=5,
	NORAS_CHAMBER=6, //0 empty, 1 spent shl, 2 spent slg, 3 shell, 4 slug
	NORAS_HAND=7,

	NORAF_SLUG=1,
	NORAF_UNLOADONLY=2,
	NORAF_SLUGLOADOUT=4, //Refreshes with slugs at the range ammobox
	NORAF_ALTHOLDING=8,
	NORAF_HOLDING=16
};

class Nora4GASpawn:IdleDummy{
	states{
	spawn:
		TNT1 A 0 nodelay{
			let zzz=HD4GBBlaster(spawn("HD4GBBlaster",pos,ALLOW_REPLACE));
			HDF.TransferSpecials(self, zzz);
			spawn("HD4GBBox",pos+(3,0,0),ALLOW_REPLACE);
			spawn("HD4GSAmmo",pos,ALLOW_REPLACE);
			spawn("HD4GSAmmo",pos-(2,0,0),ALLOW_REPLACE);
			spawn("HD4GSAmmo",pos-(4,0,0),ALLOW_REPLACE);
		}stop;
	}
}